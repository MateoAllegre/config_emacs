
* TODO Modif touche haut à gauche

#+begin_src emacs-lisp

  (define-key xah-fly-command-map (kbd (xah-fly--convert-kbd-str "'")) 'kill-word)

  (define-key xah-fly-command-map (kbd (xah-fly--convert-kbd-str "p")) 'set-mark-command)

  (define-key xah-fly-command-map (kbd (xah-fly--convert-kbd-str "y")) 'undo)

  (define-key xah-fly-command-map (kbd (xah-fly--convert-kbd-str "f")) 'xah-pop-local-mark-ring)

  (defun cp/xah-pop-global-mark-ring ()
    "Move cursor to last mark position in another buffer."
    (interactive)
    (let ((current-buffer (current-buffer)))

      ;; on va à un autre buffer
      (while (equal current-buffer (current-buffer))
        (pop-global-mark))

      ;; si il y a un prefix-argument, on ferme l'ancien buffer
      (when current-prefix-arg
        (save-window-excursion

          (switch-to-buffer current-buffer)
          (xah-close-current-buffer)

          )
        )

      ;;si on n'est pas dans un buffer utile, on passe au suivant
      (when (not (xah-user-buffer-p))
        (xah-next-user-buffer))))

  (define-key xah-fly-command-map (kbd (xah-fly--convert-kbd-str "SPC f")) 'cp/xah-pop-global-mark-ring)

#+end_src


* Programmation littérale

** Mettre une propriété 

*** sur un block

Normal
ou
org-babel-insert-header-argument

#+begin_src emacs-lisp :nom-propriété value :tangle test/config.el 

#+end_src

*** Sur un heading 

**** Exemple
:PROPERTIES:
:header-args: :results output
:END:

#+begin_src python
print("Hello")
#+end_src

#+RESULTS:
: Hello

***** Ici ça marche aussi

#+begin_src python
print("Hello")
#+end_src

#+RESULTS:
: Hello

*** Sur tout le buffer

Mettre en haut :
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args :noweb yes

** Réutiliser un morceau de code

*** UN morceau de code

#+NAME: the-value
#+begin_src emacs-lisp
  (- 2 1)
#+end_src

#+begin_src emacs-lisp :noweb yes

  <<the-value>>

#+end_src

Puis on peut mettre, dans une variable quelconque à exporter ailleur, la valeur !

#+begin_src python :noweb yes :results output
  mavar =  <<the-value()>>
  print(mavar)
#+end_src

#+RESULTS:
: 1

Ce qui sera exporté sous la forme : 
value = 1

autre exemple

#+begin_src emacs-lisp :noweb yes :tangle no
  (setq test <<the-value()>>)
#+end_src

#+RESULTS:
: 1

*** Plusieurs morceau de code

**** Exemple emacs lisp

#+begin_src emacs-lisp :noweb yes :tangle test.el

  (defun ma-fonction ()
    "DOCSTRING"
    (interactive)
    <<test>>
    )

#+end_src

#+RESULTS:
: ma-fonction

***** Code 1

#+begin_src emacs-lisp :noweb yes :noweb-ref test
(message "hello 
<<name>>
" )
#+end_src

***** Code 2

#+begin_src emacs-lisp :noweb-ref test
(message "word")
#+end_src

***** Code 3

#+name:name
#+begin_src emacs-lisp

coucou

#+end_src

**** Exemple concret

Ici toutes les requêtes

#+begin_src sql :noweb yes :tangle test/test.sql

<<mon-exercice>>

#+end_src

***** Les questions
:PROPERTIES:
:header-args: :noweb-ref mon-exercice
:END:

****** Question 1

#+begin_src sql 
  SELECT * from machin
#+end_src

****** Question 2

#+begin_src sql
  SELECT * from truc
#+end_src

* Gérer sa config

** Faire des remap

Remplacer une fonction par une autre. =Ne change pas la place=

#+begin_src emacs-lisp

  (define-key xah-fly-command-map [remap isearch-forward] 'consult-line)

#+end_src
