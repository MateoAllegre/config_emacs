#+PROPERTY: header-args    :results silent

* Raccourcis

** Moteur principal

#+begin_src emacs-lisp

    (use-package xah-fly-keys
      :straight (xah-fly-keys
		 :type git
		 :host github
		 :repo "xahlee/xah-fly-keys")
      :config
      (require 'xah-fly-keys)
      (xah-fly-keys-set-layout "optimot")
      (xah-fly-keys 1)
  )

(global-set-key (kbd "<home>") 'xah-fly-mode-toggle)
  
#+end_src



** Compter le nombre de chaque commande faite (bien pour optimiser les raccourcis)

keyfreq-show pour voir le nombre de commandes

#+begin_src emacs-lisp
  (use-package keyfreq
    :config
    ;;   Pour exclure des commandes
    (setq keyfreq-excluded-commands
          '(
            mouse-drag-region
            lsp-ui-doc--handle-mouse-movement
            mouse-set-point
            mwheel-scroll
            ))
    (setq keyfreq-buffer "*keyfreq-buffer*")
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))

#+end_src


** Mode par defaut apres certaines commandes

#+begin_src emacs-lisp

(use-package xah-fly-keys-layer
    :after xah-fly-keys
    :straight (xah-fly-keys-layer
               :type git
               :host github
               :repo "Cletip/xah-fly-keys-layer")

    :config

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-auto-command-mode
          '(recentf-cancel-dialog
            dashboard-jump-to-bookmarks
            org-agenda-show-dashboard
            dired-jump
            vertico-exit
            ace-link-eww
            debugger-quit
            ))
    (setq xah-fly-keys-layer-auto-insert-mode
          '(
            execute-extended-command-for-buffer
            org-meta-return
            org-insert-heading-respect-content
            org-insert-link
            recentf-open-files
            ;; org-capture ;; désactivé car fait bugguer !
            ))
    (require 'xah-fly-keys-layer-auto-mode))

#+end_src

** Remap de certaines touches

#+begin_src emacs-lisp

    ;;for all other extensions, you can change variable after require the extension

	(require 'xah-fly-keys-layer-better-remap)

  (use-package expand-region)
  
	(setq xah-fly-keys-layer-isearch-forward-variable 'consult-line
	      ;; xah-fly-keys-layer-ispell-word-variable 'flyspell-correct-wrapper
	      xah-fly-keys-layer-xah-extend-selection-variable 'er/expand-region
	      ;; xah-fly-keys-layer-xah-open-file-at-cursor-variable 'cp/open-link
	      xah-fly-keys-layer-recentf-open-files-variable 'consult-recent-file
	      ;; since I don't use save-buffer, I prefer this
	      ;; xah-fly-keys-layer-save-buffer-variable 'avy-goto-char-2
	      ;; xah-fly-keys-layer-describe-function-variable 'helpful-symbol
    ;; 	  xah-fly-keys-layer-describe-variable-variable 'helpful-at-point)
	      )
					    ; 
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "i"
					       'avy-goto-char-2)

#+end_src

* Voir les commandes
#+begin_src emacs-lisp


(use-package which-key
    ;; :diminish which-key-mode
    :config
    ;;activer which-key
    (which-key-mode)
    ;;temps avant déclenchement de wich-key minimum
    (setq which-key-idle-delay 0.01)
    ;; affichage sur le côté, mais si marche pas en bas
    (which-key-setup-side-window-right-bottom)
    (setq which-key-frame-max-height 100)
    (setq which-key-min-display-lines 1000))
#+end_src

#+RESULTS:
: t

* Search avec caracteres

#+begin_src emacs-lisp

(use-package avy
    ;;\ pour l'espace
    :custom
    ;;personnalition des touches, important
    ;; (avy-keys '(?a ?u ?e ?i ?t ?s ?r ?n ?\ ?\^M)) ;;^M=enter
    ;; todo adapter à xah-fly-key !
    (avy-keys '(?\ ?e ?u ?i ?a ?s ?t ?r ?. ?c))
    (avy-background t)
    ;;nouvelle touches pour escape avy go timer
    (avy-escape-chars '(?\e ?\M-g))
    :config
    (setq avy-timeout-seconds 0.25)

    ;; pour que ça marche sur toutse les fenêtres
    (setq avy-all-windows 'all-frames)

    ;;personnaliser chaque commande :
    ;; (setq avy-keys-alist
    ;; `((avy-goto-char . ,(number-sequence ?a ?f))
    ;; (avy-goto-word-1 . (?f ?g ?h ?j))))

    (defun avy-goto-char-timer-end (&optional arg)
      "Read one or many consecutive chars and jump to the last one.
  The window scope is determined by `avy-all-windows' (ARG negates it)."
      (interactive "P")
      (avy-goto-char-timer arg)
      (forward-char (length avy-text))))

#+end_src




* opti cmd de base

#+begin_src emacs-lisp

(use-package consult)

#+end_src
* Variable and mode built-in

** Gestion du buffer scratch

*** Message de base à nil

#+begin_src emacs-lisp
  (setq initial-scratch-message "Buffer scratch en org-mode !")
#+end_src

*** Mode de base dans scratch

#+begin_src emacs-lisp
  (defvaralias 'major-mode-for-buffer-scratch 'initial-major-mode)
  (setq major-mode-for-buffer-scratch 'org-mode)
#+end_src

** Fichiers récents sauvegardé 

#+begin_src emacs-lisp

  (use-package recentf
    :config

    (recentf-mode 1)
    (setq recentf-max-menu-items 100)
    (setq recentf-max-saved-items 100)

    ;; fichier à exclure de recentf
    ;; If you use recentf then you might find it convenient to exclude all of the files in the no-littering directories using something like the following.
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (add-to-list 'recentf-exclude "/tmp/") ;;pour emacs-everywhere notamment
    ;; Exlcude the org-agenda files
    ;; (they flood the recentf because dashboard always checks their content)
    ;; (with-eval-after-load 'org ;;important
    ;; (add-to-list 'recentf-exclude (org-agenda-files))
    ;; )
    )

#+end_src

** Dernière commandes proposé

Cela permet de ré-avoir les commandes faites lors de la dernière session d'emacs.

#+begin_src emacs-lisp 

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (setq savehist-file (concat user-emacs-directory "var/savehist.el"))
    :config
    (setq history-length 200)
    ;;List of additional variables to save.
    (setq savehist-additional-variables '(kill-ring search-ring recentf-list))
    (savehist-mode t)
    
    ;; pour améliorer les perf ? voir avec Mathieu
    (put 'minibuffer-history 'history-length 50)
    (put 'evil-ex-history 'history-length 50)
    (put 'kill-ring 'history-length 25)
    )

#+end_src
** Gestion des sauvegardes (fichiers dégeulasse), et fichiers à ne pas mettre dans les backups

#+begin_src emacs-lisp 

  ;;sauvegarde à tout les changement de fenêtre
  (defun xah-save-all-unsaved (&rest args)
    "Save all unsaved files. no ask.
          Version 2019-11-05"
    (interactive)
    (unless (string-equal (file-name-extension buffer-file-name) "gpg")
      (save-some-buffers t))
    )

  ;; mis dans xfk-layer
  ;; (defun cp/xah-fly-save-buffer-if-file-not-gpg ()
  ;; "Save current buffer if it is a file."
  ;; (interactive)
  ;; (when (and (buffer-file-name) (not (string-equal (file-name-extension buffer-file-name) "gpg")))
  ;; (save-buffer)))

  ;; (add-to-list 'window-state-change-functions 'xah-save-all-unsaved)
  ;; sauvegarde automatique avec command mode
  ;; (add-hook 'xah-fly-command-mode-activate-hook 'cp/xah-fly-save-buffer-if-file-not-gpg)

  (setq make-backup-files t	  ; backup of a file the first time it is saved.
        backup-by-copying t	  ; don't clobber symlinks
        version-control t		  ; version numbers for backup files
        delete-old-versions t	  ; delete excess backup files silently
        delete-by-moving-to-trash t ; Put the deleted files in the trash
        kept-old-versions 6 ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9 ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t ; auto-save every buffer that visits a file into another file, not the original
        auto-save-timeout 20 ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
        ;; auto-save-visited-file-name t ;; sauvegarde directement sur le fichier original
        )

  ;;fichier à ne pas copier dans les backups
  (setq auto-mode-alist
        (append
         (list
          '("\\.\\(vcf\\|gpg\\)$" . sensitive-minor-mode))
         auto-mode-alist))

#+end_src
** Permet de r y ou n au lieu de yes ou no 

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)
  
#+end_src
** Rafraichit automatiquement les buffers, sauf si ya eu des moddif évidemment
#+begin_src emacs-lisp 

  (global-auto-revert-mode t)
  

#+end_src

** Ne demande pas de confirme pour certains revert

#+begin_src emacs-lisp
  (setq revert-without-query '(".pdf"))
#+end_src

** Échap marche en une fois
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
** Réécriture/remplacement lors de texte sélectionné
#+begin_src emacs-lisp

  (delete-selection-mode t)
  
#+end_src
** Sauvegarde la place du curseur dans les fichiers (marche sans no-litteralling)

#+begin_src emacs-lisp

    (save-place-mode 1)

#+end_src

** Dossier de base dans .emacs.d quand on fait un find file

#+begin_src emacs-lisp
  (cd user-emacs-directory)
#+end_src

* Minibuffer

[[https://github.com/minad/vertico][Vertico]] and friends provides a minimalistic vertical completion UI, which is based on the default completion system.
** Other
*** Pour faire des commandes dans le mini-buffer

#+begin_src emacs-lisp 

  (setq enable-recursive-minibuffers t)

#+end_src
** Vertico

Vertico provides a minimalistic vertical completion UI, which is based on the default completion system

#+begin_src emacs-lisp

  (use-package vertico

    ;;charger les extensions de vertico
    :load-path "straight/build/vertico/extensions"
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :config

    ;; Prefix the current candidate with “» ”. From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (advice-add #'vertico--format-candidate :around
                (lambda (orig cand prefix suffix index _start)
                  (setq cand (funcall orig cand prefix suffix index _start))
                  (concat
                   (if (= vertico--index index)
                       (propertize "» " 'face 'vertico-current)
                     "  ")
                   cand)))

    ;;pour activer vertico directory (remonte d'un dossier à chaque fois, pratique ! )
    (require 'vertico-directory)
    ;; (define-key vertico-map [remap backward-kill-word] #'vertico-directory-up)
    ;; (define-key vertico-map [remap xah-delete-backward-char-or-bracket-text] #'vertico-directory-up)
    (define-key vertico-map [remap open-line] #'vertico-directory-up)
    ;; (define-key vertico-map [remap delete-backward-char] #'vertico-directory-up)

    ;; pour pouvoir jump à une entrée
    ;; (define-key vertico-map [remap avy-goto-char] #'vertico-quick-jump)

    (with-eval-after-load 'avy

      (defun divide-list-in-two-equal-part (lst)
        (let ((len (length lst)))
          (list (seq-subseq lst 0 (/ len 2))
                (seq-subseq lst (/ len 2)))))

      (setq avy-keys-alist-two-part (divide-list-in-two-equal-part (mapconcat 'char-to-string '(?\ ?e ?u ?i ?a ?s ?t ?r ?n) "")))

      ;; lorsqu'il y a une touche
      (setq vertico-quick1 (car avy-keys-alist-two-part))
      ;; deux touches
      (setq vertico-quick2 (cadr avy-keys-alist-two-part))

      (require 'vertico-quick)
      (use-package vertico-quick
        :straight nil
        :after vertico
        :custom (test 2)
        :bind (:map vertico-map
                    ("C-<return>" . vertico-quick-exit))))

    (vertico-mode))

#+end_src

(defun vertico-quick-jump ()
        "Jump to candidate using quick keys."
        (interactive)
        (cond
         ((= vertico--total 0) (and (minibuffer-message "No match") nil))
         ;;opti s'il y a un candidat, on le choisit 
         ((= vertico--total 1) (vertico-exit))
         ;; si on est pas sur le premier candidat, en considère qu'on a bougé avec de la prévisualisation (comme consult-line), donc on exit tout de suite
         ((not (= vertico--index 0))
          (vertico-exit))
         (t (let ((idx (vertico-quick--read)))
              (when (consp idx) (setq idx (vertico-quick--read (car idx))))
              (when idx (setq vertico--index idx))))))
** Marginalia

Show document of function in =M-x=, or file attributes in C-x C-f
info sur le côté du mini buffer

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode)
    )

#+end_src
** Orderless

Use space-separated search terms in any order when completing with Icomplete or the default interface.
Exemple : M-x consult-line, taper "use ordeless", et vous tomberez sur use-package orderless
OVERCHEAT et je m'en sert tout le temps

#+begin_src emacs-lisp 

  ;; Complétation par candidats      
  ;; Use the `orderless' completion style.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :init

    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion))))
    :config

    (setq orderless-matching-styles
          '(
            orderless-regexp
            ;; orderless-literal
            orderless-initialism ;;très puissant
            ;; orderless-prefixes ;; utile pour les commandes de temps en temps
            ;; orderless-flex ;; sert à rien pour moi, donne même des candidats inutiles
            ;; orderless-without-literal ;; à ne pas utiliser directement
            ))

  (setq orderless-component-separator 'orderless-escapable-split-on-space)

    ;;couleur avec company
    (defun just-one-face (fn &rest args)
      (let ((orderless-match-faces [completions-common-part]))
        (apply fn args)))
    (advice-add 'company-capf--candidates :around #'just-one-face))

#+end_src

* Org-mode

** Pour coder dans org (org-babel)

*** Template avec "<" activer

Now, you can type "<el or <sh" then "tab", and let's go for org-babel !

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("cd" . "src C"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp\n\n"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))

#+end_src

*** Les langages chargé par org-babel

Do not load all to booste the startup time 

#+begin_src emacs-lisp
    (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     ;; (ditaa      . t)
     (C          . t)
     (dot        . t)
     (emacs-lisp . t)
     ;; (scheme     . t)
     ;; (gnuplot    . t)
     ;; (haskell    . t)
     (latex      . t)
     ;; (js         . t)
     ;; (ledger     . t)
     ;; (matlab     . t)
     ;; (ocaml      . t)
     ;; (octave     . t)
     ;; (plantuml   . t)
     (python     . t)
     ;; (R          . t)
     ;; (ruby       . t)
     ;; (screen     . nil)
     ;; (scheme     . t)
     (shell      . t)
     (sql        . t)
     (sqlite     . t)
     (java     . t)
     (js . t) ;;javascripts
     ))

  (setq org-babel-python-command "python3")

#+end_src
*** Annulation de la demande de confirmation lors de la demande d'évaluation du code (babel, elisp-link, shell link)
#+begin_src emacs-lisp 
  (setq org-confirm-babel-evaluate nil	  ;; for running code blocks
        org-confirm-elisp-link-function nil ;; for elisp links
        org-confirm-shell-link-function nil)  ;; for shell links
#+end_src
*** Indente le code selon le language
Dans les blocs de code, on veut la mise en évidence de syntaxe, et l'on
utilise la touche TAB pour indenter (et non pour insérer une tabulation)

#+begin_src emacs-lisp 
  (setq org-src-tab-acts-natively t)
#+end_src

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

** Laisser une ligne vide entre les heading org-mode lors de M-RET

#+begin_src emacs-lisp
  (setq org-blank-before-new-entry
        '((heading . t)
          (plain-list-item . auto)))
#+end_src


* Fonction personnelle

** Recharger la configuration d'emacs

#+begin_src emacs-lisp

  (defun reload-configuration-of-emacs()
    (interactive)
    (org-babel-load-file "c:/Users/mateo/AppData/Roaming/.emacs.d/config.org"))

#+end_src

#+RESULTS:
: reload-configuration-of-emacs
